/*
srv-config

Service to manage configuration

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Alarm struct for Alarm
type Alarm struct {
	Id string `json:"id"`
	Enabled bool `json:"enabled"`
	Name string `json:"name"`
	Hour int32 `json:"hour"`
	Minute int32 `json:"minute"`
	Days []int32 `json:"days"`
	SkipNext bool `json:"skip_next"`
}

// NewAlarm instantiates a new Alarm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlarm(id string, enabled bool, name string, hour int32, minute int32, days []int32, skipNext bool) *Alarm {
	this := Alarm{}
	this.Id = id
	this.Enabled = enabled
	this.Name = name
	this.Hour = hour
	this.Minute = minute
	this.Days = days
	this.SkipNext = skipNext
	return &this
}

// NewAlarmWithDefaults instantiates a new Alarm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlarmWithDefaults() *Alarm {
	this := Alarm{}
	return &this
}

// GetId returns the Id field value
func (o *Alarm) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Alarm) SetId(v string) {
	o.Id = v
}

// GetEnabled returns the Enabled field value
func (o *Alarm) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Alarm) SetEnabled(v bool) {
	o.Enabled = v
}

// GetName returns the Name field value
func (o *Alarm) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Alarm) SetName(v string) {
	o.Name = v
}

// GetHour returns the Hour field value
func (o *Alarm) GetHour() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Hour
}

// GetHourOk returns a tuple with the Hour field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetHourOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hour, true
}

// SetHour sets field value
func (o *Alarm) SetHour(v int32) {
	o.Hour = v
}

// GetMinute returns the Minute field value
func (o *Alarm) GetMinute() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Minute
}

// GetMinuteOk returns a tuple with the Minute field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetMinuteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Minute, true
}

// SetMinute sets field value
func (o *Alarm) SetMinute(v int32) {
	o.Minute = v
}

// GetDays returns the Days field value
func (o *Alarm) GetDays() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Days
}

// GetDaysOk returns a tuple with the Days field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetDaysOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Days, true
}

// SetDays sets field value
func (o *Alarm) SetDays(v []int32) {
	o.Days = v
}

// GetSkipNext returns the SkipNext field value
func (o *Alarm) GetSkipNext() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SkipNext
}

// GetSkipNextOk returns a tuple with the SkipNext field value
// and a boolean to check if the value has been set.
func (o *Alarm) GetSkipNextOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SkipNext, true
}

// SetSkipNext sets field value
func (o *Alarm) SetSkipNext(v bool) {
	o.SkipNext = v
}

func (o Alarm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["hour"] = o.Hour
	}
	if true {
		toSerialize["minute"] = o.Minute
	}
	if true {
		toSerialize["days"] = o.Days
	}
	if true {
		toSerialize["skip_next"] = o.SkipNext
	}
	return json.Marshal(toSerialize)
}

type NullableAlarm struct {
	value *Alarm
	isSet bool
}

func (v NullableAlarm) Get() *Alarm {
	return v.value
}

func (v *NullableAlarm) Set(val *Alarm) {
	v.value = val
	v.isSet = true
}

func (v NullableAlarm) IsSet() bool {
	return v.isSet
}

func (v *NullableAlarm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlarm(val *Alarm) *NullableAlarm {
	return &NullableAlarm{value: val, isSet: true}
}

func (v NullableAlarm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlarm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


