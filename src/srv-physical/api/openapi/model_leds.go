/*
srv-physical

Service to handle buttons, leds, display backlight, ...

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Leds struct for Leds
type Leds struct {
	Color PresetColor `json:"color"`
	Brightness *int32 `json:"brightness,omitempty"`
}

// NewLeds instantiates a new Leds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeds(color PresetColor) *Leds {
	this := Leds{}
	this.Color = color
	var brightness int32 = 100
	this.Brightness = &brightness
	return &this
}

// NewLedsWithDefaults instantiates a new Leds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLedsWithDefaults() *Leds {
	this := Leds{}
	var brightness int32 = 100
	this.Brightness = &brightness
	return &this
}

// GetColor returns the Color field value
func (o *Leds) GetColor() PresetColor {
	if o == nil {
		var ret PresetColor
		return ret
	}

	return o.Color
}

// GetColorOk returns a tuple with the Color field value
// and a boolean to check if the value has been set.
func (o *Leds) GetColorOk() (*PresetColor, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Color, true
}

// SetColor sets field value
func (o *Leds) SetColor(v PresetColor) {
	o.Color = v
}

// GetBrightness returns the Brightness field value if set, zero value otherwise.
func (o *Leds) GetBrightness() int32 {
	if o == nil || o.Brightness == nil {
		var ret int32
		return ret
	}
	return *o.Brightness
}

// GetBrightnessOk returns a tuple with the Brightness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leds) GetBrightnessOk() (*int32, bool) {
	if o == nil || o.Brightness == nil {
		return nil, false
	}
	return o.Brightness, true
}

// HasBrightness returns a boolean if a field has been set.
func (o *Leds) HasBrightness() bool {
	if o != nil && o.Brightness != nil {
		return true
	}

	return false
}

// SetBrightness gets a reference to the given int32 and assigns it to the Brightness field.
func (o *Leds) SetBrightness(v int32) {
	o.Brightness = &v
}

func (o Leds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["color"] = o.Color
	}
	if o.Brightness != nil {
		toSerialize["brightness"] = o.Brightness
	}
	return json.Marshal(toSerialize)
}

type NullableLeds struct {
	value *Leds
	isSet bool
}

func (v NullableLeds) Get() *Leds {
	return v.value
}

func (v *NullableLeds) Set(val *Leds) {
	v.value = val
	v.isSet = true
}

func (v NullableLeds) IsSet() bool {
	return v.isSet
}

func (v *NullableLeds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeds(val *Leds) *NullableLeds {
	return &NullableLeds{value: val, isSet: true}
}

func (v NullableLeds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


