/*
srv-physical

Service to handle buttons, leds, display backlight, ...

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PresetColor the model 'PresetColor'
type PresetColor string

// List of PresetColor
const (
	PRESETCOLOR_BLACK PresetColor = "BLACK"
	PRESETCOLOR_RED PresetColor = "RED"
	PRESETCOLOR_ORANGE PresetColor = "ORANGE"
	PRESETCOLOR_YELLOW PresetColor = "YELLOW"
	PRESETCOLOR_WARM_WHITE PresetColor = "WARM_WHITE"
)

// All allowed values of PresetColor enum
var AllowedPresetColorEnumValues = []PresetColor{
	"BLACK",
	"RED",
	"ORANGE",
	"YELLOW",
	"WARM_WHITE",
}

func (v *PresetColor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PresetColor(value)
	for _, existing := range AllowedPresetColorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PresetColor", value)
}

// NewPresetColorFromValue returns a pointer to a valid PresetColor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPresetColorFromValue(v string) (*PresetColor, error) {
	ev := PresetColor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PresetColor: valid values are %v", v, AllowedPresetColorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PresetColor) IsValid() bool {
	for _, existing := range AllowedPresetColorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PresetColor value
func (v PresetColor) Ptr() *PresetColor {
	return &v
}

type NullablePresetColor struct {
	value *PresetColor
	isSet bool
}

func (v NullablePresetColor) Get() *PresetColor {
	return v.value
}

func (v *NullablePresetColor) Set(val *PresetColor) {
	v.value = val
	v.isSet = true
}

func (v NullablePresetColor) IsSet() bool {
	return v.isSet
}

func (v *NullablePresetColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePresetColor(val *PresetColor) *NullablePresetColor {
	return &NullablePresetColor{value: val, isSet: true}
}

func (v NullablePresetColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePresetColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

